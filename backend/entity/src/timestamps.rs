//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use crate::prelude::OrmSerializable;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
impl OrmSerializable for Model {}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "timestamps")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub rfid: String,
    pub location: i32,
    pub ts: DateTime,
}

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct PostTimestamp {
    pub rfid: String,
    pub location: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::locations::Entity",
        from = "Column::Location",
        to = "super::locations::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Locations,
    #[sea_orm(
        belongs_to = "super::residents::Entity",
        from = "Column::Rfid",
        to = "super::residents::Column::Rfid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Residents,
}

impl Related<super::locations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Locations.def()
    }
}

impl Related<super::residents::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Residents.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
